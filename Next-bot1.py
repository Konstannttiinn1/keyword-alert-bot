from telethon import TelegramClient, events
from telethon.sessions import StringSession
import json
import os
import asyncio

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
CONFIG_FILE = 'config.json'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
if os.path.exists(CONFIG_FILE):
    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
        config = json.load(f)
else:
    config = {
        "api_id": 123456,
        "api_hash": "your_api_hash",
        "session_string": "",
        "user_id": 123456789,
        "keywords": ["vpn", "–±–æ—Ç"],
        "chats": []
    }
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    print("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏ config.json –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞")
    exit()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ===
if config.get("session_string"):
    session = StringSession(config['session_string'])
else:
    session = config.get("session_name", "session")

client = TelegramClient(session, config['api_id'], config['api_hash'])

# === –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ username –∏ chat_id ===
async def resolve_chats():
    resolved = []
    for chat in config['chats']:
        try:
            entity = await client.get_entity(chat)
            resolved.append(entity)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç: {chat} -> ID: {entity.id}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç—É {chat}: {e}")
    return resolved

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    resolved_chats = await resolve_chats()
    resolved_ids = [int(e.id) for e in resolved_chats]

    if not resolved_ids:
        print("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —á–∞—Ç –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å config['chats'] –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å username!")

    print(f"üü¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã (ID): {resolved_ids}")

    @client.on(events.NewMessage(chats=resolved_ids))
    async def handler(event):
        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º —á–∞—Ç–µ {event.chat_id}: {event.message.message}")

        msg_text = event.message.message.lower()
        for keyword in config['keywords']:
            if keyword.lower() in msg_text:
                sender = await event.get_sender()
                chat_id = str(event.chat_id)

                if chat_id.startswith("-100"):
                    link = f"https://t.me/c/{chat_id[4:]}/{event.message.id}"
                else:
                    link = "üîó (—Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"

                alert_text = (
                    f"üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</b>\n"
                    f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {sender.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{sender.username or '–±–µ–∑_—é–∑–µ—Ä–Ω–µ–π–º–∞'})\n"
                    f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {event.message.text[:400]}\n"
                    f"üîó <a href=\"{link}\">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>"
                )

                await client.send_message(config['user_id'], alert_text, parse_mode='html')
                break

    # –ö–æ–º–∞–Ω–¥—ã
    @client.on(events.NewMessage(from_users=config['user_id'], pattern='/addword (.+)'))
    async def add_keyword(event):
        word = event.pattern_match.group(1).strip().lower()
        if word not in config['keywords']:
            config['keywords'].append(word)
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            await event.respond(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        else:
            await event.respond(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")

    @client.on(events.NewMessage(from_users=config['user_id'], pattern=r'/addchat (.+)'))
    async def add_chat(event):
        chat_id = event.pattern_match.group(1).strip()
        if chat_id not in config['chats']:
            config['chats'].append(chat_id)
            with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            await event.respond(f"‚úÖ –ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
        else:
            await event.respond(f"‚ö†Ô∏è –ß–∞—Ç {chat_id} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await client.run_until_disconnected()

# === –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ ===
with client:
    client.loop.run_until_complete(main())