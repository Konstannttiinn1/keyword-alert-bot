# Keyword-alert.py

import json
import os
from telethon import TelegramClient, events, Button
from telethon.sessions import StringSession
from telethon.sync import TelegramClient as SyncTelegramClient

CONFIG_FILE = 'config.json'

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
if os.path.exists(CONFIG_FILE):
    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
        config = json.load(f)
else:
    config = {
        "api_id": 123456,
        "api_hash": "your_api_hash",
        "session_name": "session",
        "session_string": "",
        "admin_ids": [123456789],
        "keywords": [],
        "chats": [],
        "bot_token": "your_bot_token"
    }
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    print("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏ config.json –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞")
    exit()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
session = StringSession(config['session_string']) if config.get("session_string") else config.get("session_name", "session")
user_client = TelegramClient(session, config['api_id'], config['api_hash'])
bot_client = TelegramClient("bot_session", config['api_id'], config['api_hash']).start(bot_token=config['bot_token'])

# === –ü–æ–º–æ—â–Ω–∏–∫–∏ ===
def save_config():
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@user_client.on(events.NewMessage())
async def keyword_alert_handler(event):
    if event.chat_id not in [int(c) if isinstance(c, int) or str(c).lstrip('-').isdigit() else c for c in config['chats']]:
        return
    msg_text = event.message.message.lower()
    for keyword in config['keywords']:
        if keyword.lower() in msg_text:
            sender = await event.get_sender()
            chat_id = str(event.chat_id)
            if chat_id.startswith('-100'):
                link = f"https://t.me/c/{chat_id[4:]}/{event.message.id}"
            else:
                link = "üîó (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É)"

            alert = (
                f"üö® <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ</b>\n"
                f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {sender.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{sender.username or '–±–µ–∑_—é–∑–µ—Ä–Ω–µ–π–º–∞'})\n"
                f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {event.message.text[:400]}\n"
                f"üîó <a href=\"{link}\">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>"
            )
            for admin_id in config['admin_ids']:
                await bot_client.send_message(admin_id, alert, parse_mode='html')
            break

@bot_client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    if event.sender_id not in config['admin_ids']:
        return
    await menu_handler(event)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—ã /menu ===
@bot_client.on(events.NewMessage(pattern='/menu'))
async def menu_handler(event):
    if event.sender_id not in config['admin_ids']:
        return
    await event.respond(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        buttons=[
            [Button.inline("üîë –°–ª–æ–≤–∞", b"menu_words")],
            [Button.inline("üí¨ –ß–∞—Ç—ã", b"menu_chats")]
        ]
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ ===
@bot_client.on(events.CallbackQuery)
async def buttons_handler(event):
    sender = await event.get_sender()
    if sender.id not in config['admin_ids']:
        return
    data = event.data.decode('utf-8')

    if data == "back_to_main":
        await event.edit(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            buttons=[
                [Button.inline("üîë –°–ª–æ–≤–∞", b"menu_words")],
                [Button.inline("üí¨ –ß–∞—Ç—ã", b"menu_chats")]
            ]
        )

    elif data == "menu_words":
        await event.edit(
            "üîë –†–∞–±–æ—Ç–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:",
            buttons=[
                [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", b"add_word")],
                [Button.inline("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", b"del_word")],
                [Button.inline("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞", b"show_words")],
                [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"back_to_main")]
            ]
        )

    elif data == "menu_chats":
        await event.edit(
            "üí¨ –†–∞–±–æ—Ç–∞ —Å —á–∞—Ç–∞–º–∏:",
            buttons=[
                [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", b"add_chat")],
                [Button.inline("‚ûñ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", b"del_chat")],
                [Button.inline("üìã –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã", b"show_chats")],
                [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"back_to_main")]
            ]
        )

    elif data == "add_word":
        await event.respond("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
        bot_client._next_action = 'awaiting_word'

    elif data == "del_word":
        if not config['keywords']:
            await event.answer("‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", alert=True)
            return
        buttons = [[Button.inline(word, f"remword:{word}")] for word in config['keywords']]
        buttons.append([Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"menu_words")])
        await event.edit("–í—ã–±–µ—Ä–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", buttons=buttons)

    elif data == "add_chat":
        await event.respond("‚úçÔ∏è –í–≤–µ–¥–∏ @username –∏–ª–∏ ID —á–∞—Ç–∞:")
        bot_client._next_action = 'awaiting_chat'

    elif data == "del_chat":
        if not config['chats']:
            await event.answer("‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", alert=True)
            return
        buttons = [[Button.inline(str(c), f"remchat:{c}")] for c in config['chats']]
        buttons.append([Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"menu_chats")])
        await event.edit("–í—ã–±–µ—Ä–∏ —á–∞—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", buttons=buttons)

    elif data == "show_words":
        text = "üìã –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n" + ("\n".join(config['keywords']) or "(–ø—É—Å—Ç–æ)")
        await event.answer(text, alert=True)

    elif data == "show_chats":
        text = "üìã –ß–∞—Ç—ã:\n" + ("\n".join(map(str, config['chats'])) or "(–ø—É—Å—Ç–æ)")
        await event.answer(text, alert=True)

    elif data.startswith("remword:"):
        word = data.split(":", 1)[1]
        if word in config['keywords']:
            config['keywords'].remove(word)
            save_config()
            await event.edit(f"‚ùå –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.", buttons=[
                [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"menu_words")]
            ])

    elif data.startswith("remchat:"):
        raw_chat = data.split(":", 1)[1].strip()
        try:
            chat_id = int(raw_chat) if raw_chat.lstrip('-').isdigit() else raw_chat
            found = next((c for c in config['chats'] if str(c) == str(chat_id)), None)
            if found is not None:
                config['chats'].remove(found)
                save_config()
                await event.edit(f"‚ùå –ß–∞—Ç {chat_id} —É–¥–∞–ª—ë–Ω.", buttons=[
                    [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"menu_chats")]
                ])
            else:
                await event.answer(f"‚ö†Ô∏è –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", alert=True)
        except Exception as e:
            await event.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", alert=True)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–æ–∫ ===
@bot_client.on(events.NewMessage())
async def user_input_handler(event):
    if event.sender_id not in config['admin_ids']:
        return

    if getattr(bot_client, '_next_action', None) == 'awaiting_word':
        word = event.raw_text.strip().lower()
        if word and word not in config['keywords']:
            config['keywords'].append(word)
            save_config()
            await event.respond(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {word}")
        else:
            await event.respond("‚ö†Ô∏è –°–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥.")
        bot_client._next_action = None

    elif getattr(bot_client, '_next_action', None) == 'awaiting_chat':
        raw = event.raw_text.strip()
        try:
            if raw.startswith('@'):
                entity = await user_client.get_entity(raw)
                chat_id = entity.id
            else:
                chat_id = int(raw)
                if not str(chat_id).startswith('-100'):
                    chat_id = int(f"-100{chat_id}")

            if chat_id not in config['chats']:
                config['chats'].append(chat_id)
                save_config()
                await event.respond(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç: {chat_id}")
            else:
                await event.respond("‚ö†Ô∏è –ß–∞—Ç —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
        except Exception as e:
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {e}")

        bot_client._next_action = None

# === –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
print("üöÄ –ë–æ—Ç –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω—ã. –û–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è...")
user_client.start()
bot_client.start()
user_client.run_until_disconnected()
bot_client.run_until_disconnected()